<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Shakes & Fidget Version: 495
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SfSdk.Constants
{		
    /// <summary>
    ///     Contains the auto-generated constants from the original S&amp;F client code.
    /// </summary>
    internal enum SF
    {
<#
		GenerateFromOriginal();
#>
    }
}<#+

private void GenerateFromOriginal()
{
	string path = Host.ResolvePath(string.Empty);
	var lines = File.ReadAllLines(Path.Combine(path, "SfConstantsOriginal.txt"));
	InsertLines(lines);
}

private void InsertLines(IEnumerable<string> lines) 
{
	PushIndent("\t");
	PushIndent("\t");

    foreach (var line in lines)
    {
        if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#")) continue;

        var str = line.Substring(line.IndexOf("const", StringComparison.Ordinal) + 5);
        var split = str.Split('=');

        var partName = split[0];
        partName = partName.Trim(' ');
        if (partName.Contains(':')) continue;

        var partValue = split[1];
        partValue = partValue.Trim(' ', ';');

        var nameParts = partName.Split('_').ToList();
        var resultNameParts = new string[nameParts.Count];
        for (var i = 0; i < nameParts.Count; i++)
        {
            string previous = null;
            if (i > 0) previous = nameParts[i - 1];
            var result = string.Empty;
            int j;
            if (int.TryParse(nameParts[i], out j) && int.TryParse(previous, out j)) result += "_";
            foreach (char c in nameParts[i])
            {
                if (result.Length == 0)
                    result += c.ToString(CultureInfo.InvariantCulture).ToUpper();
                else if (result.Length > 0 && int.TryParse(result.Last().ToString(CultureInfo.InvariantCulture), out j))
                    result += c.ToString(CultureInfo.InvariantCulture).ToUpper();
                else
                    result += c.ToString(CultureInfo.InvariantCulture).ToLower();
            }
            resultNameParts[i] = result;
        }
        var name = string.Join(string.Empty, resultNameParts);
        int value;
        if (!int.TryParse(partValue, out value)) continue;

        var formatString = "{0} = {1}";
        if (line != lines.Last()) formatString += ",";
        WriteLine(string.Format(formatString, name, value));
    }

	PopIndent();
	PopIndent();
}

#>